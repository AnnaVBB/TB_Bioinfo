# Projeto TCGA - BRCA, COAD, LUAD- Normal vs Maligno # 

Objetivo: análise comparativa de dados genômicos e clínicos entre amostras normais e tumorais disponíveis no banco de dados do National Cancer Institute (TCGA - The Cancer Genome Atlas) do câncer de mama (TCGA-BRCA), câncer de pulmão (TCGA-LUAD) e câncer de intestino (TCGA-COAD). 
O foco será em: vias de sinalização do câncer (Gene Set Enrichment Analysis), análise de expressão gênica (RNA-seq/STAR counts) e dados clínicos.
- Comparar o perfil de mutações entre amostras normais e tumorais.
- Analisar a expressão diferencial de genes entre as amostras.
- Identificar potenciais marcadores moleculares associados ao fenótipo maligno.
- Identificar as vias de sinalização..
- Correlacionar os dados clínicos com os achados genômicos.

# Baixar os manifestos 
  Através do portal NIH-GDC Data Portal, crie sua coorte e baixe os respectivos manifestos.
  Para o nosso trabalho foram selecionados os projetos TCGA-BRCA, TCGA-COAD e TCGA-LUAD
  Através do repositório foram aplicados os filtros RNA-seq (em estratégia experimental) e STAR-counts (em tipo de fluxo de trabalho), selecionei os projetos "open access" e fiz o download do manifesto.
  Foi gerado um novo manifesto contendo mais colunas com mais informações, como a classificação de amostra normal ou tumoral
  Para filtrar os pacientes foram aplicados filtros para remover barcodes (identificadores do paciente) únicos, deixando apenas aqueles que continham tanto uma amostra normal, quanto uma tumoral
  Baixar os dados clínicos (por meio de um pacote do R) para cada um dos câncers e selecionar as colunas de interesse para o projeto
  Combinar os dados clíncos com o arquivo de manifesto filtrado e separar em três arquivos de acordo com o tipo de câncer 

# Baixar os dados de expressão gênica 
  Fazer o download do GDC data transfer tool e realizar o download dos arquivos de expressão gênica (eles virão em pastas separadas, cada uma contendo ao menos um arquivo .tsv)
  Exemplo de comando para terminal: 
  .\gdc-client download -m COAD_manifesto_completo.txt

# Montar a matriz deseQ
  O código deve integrar os arquivos de expressão gênica (.tsv) ao manifesto e dados clínicos, garantindo que as amostras de tumor e tecido normal sejam devidamente emparelhadas
  Gerar a matriz deseq para cada um dos manifestos e ordenar os Id's da matriz a partir dos ID's do manifesto
  Linhas: genes.
  Colunas: amostras (IDs).
  Valores: contagens brutas de expressão (ex.: dados gerados pelo STAR ou Salmon).

        # Instalação de pacotes
      if (!requireNamespace("BiocManager", quietly = TRUE))
          install.packages("BiocManager")
      BiocManager::install("DESeq2")
      BiocManager::install("edgeR")
      
      1. Pipeline com DESeq2
      Passo 1: Carregar os dados
      library(DESeq2)
      # Carregar matriz de contagens (genes x amostras)
      count_matrix <- read.csv("matriz_de_contagens.csv", row.names = 1)
      # Carregar design (metadados das amostras: grupo tumor x normal)
      metadata <- read.csv("design.csv")
      # Certifique-se de que as amostras no design correspondem às colunas na matriz
      metadata$sample_id <- factor(metadata$sample_id)
      rownames(metadata) <- metadata$sample_id
      count_matrix <- count_matrix[, metadata$sample_id]
      
      Passo 2: Criar o objeto DESeqDataSet
      dds <- DESeqDataSetFromMatrix(countData = count_matrix,
                                    colData = metadata,
                                    design = ~ group) # 'group' é a variável tumor/normal
      Passo 3: Normalizar os dados
      dds <- DESeq(dds)
      Passo 4: Identificar genes diferencialmente expressos
      res <- results(dds, contrast = c("group", "tumor", "normal"))
      # Ordenar os resultados por significância
      res <- res[order(res$padj), ]
      
      Passo 5: Filtrar genes diferencialmente expressos
      deg <- res[res$padj < 0.05 & abs(res$log2FoldChange) > 1, ]
      write.csv(deg, "genes_diferencialmente_expressos.csv")
      
      4. Visualização
      Volcano Plot:
      library(ggplot2)
      res$significance <- ifelse(res$padj < 0.05 & abs(res$log2FoldChange) > 1, "Significant", "Not Significant")
      ggplot(res, aes(x = log2FoldChange, y = -log10(padj), color = significance)) +
        geom_point(alpha = 0.6) +
        theme_minimal() +
        labs(title = "Volcano Plot", x = "log2(Fold Change)", y = "-log10(p-value adjusted)")
      Heatmap:
      library(pheatmap)
      # Selecionar genes significativos para o heatmap
      significant_genes <- rownames(deg)
      heatmap_data <- count_matrix[significant_genes, ]
      pheatmap(log2(heatmap_data + 1), cluster_rows = TRUE, cluster_cols = TRUE)
    
      5. Interpretação
        Os genes diferencialmente expressos com log2FoldChange > 0 estão superexpressos no tumor.
        Os genes com log2FoldChange < 0 estão subexpressos no tumor.
        Os resultados podem ser cruzados com bases de dados como KEGG, Reactome, ou GO para analisar as funções dos genes.
      
      6. Outras Ferramentas
      edgeR: Outra ferramenta popular, especialmente para experimentos com muitas replicações.
      limma: Boa opção para análise de microarrays ou RNA-Seq transformado em valores log.
    
# Realizar os plots e análises de interesse
      - Volcano plot + gerar gráficos de barras ou gráficos de dispersão para visualizar a expressão dos principais genes de interesse.
      - Heatmap
      - tumor maior x menor com idade
      - tumor e sobrevida (vivo ou morte)

# Anotações
 Etapas para analisar 
 - Parear por grau o tecido normal e maligno de cada paciente
 - Identificação de Genes de Interesse: Examine os genes que foram classificados como "Significant" no gráfico. Anote os genes com maior log2FoldChange e aqueles com menor padj.
 - Análise de Enriquecimento de Vias: usando pacotes como clusterProfiler ou pathview para identificar quais vias de sinalização estão sobre-representadas entre os genes diferencialmente expressos.
   - Ferramentas como GSEA (Gene Set Enrichment Analysis) ou DAVID podem ser utilizadas para identificar quais vias de sinalização estão significativamente enriquecidas com os genes diferencialmente expressos. Use conjuntos de genes previamente anotados (ex.: MSigDB - Molecular Signatures Database).
 - Análise de vias de sinalização: 
   - Realize uma análise de expressão diferencial para identificar genes diferencialmente expressos (DEGs) entre os grupos (tumor x tecido normal).
   - Use bancos de dados especializados em vias de sinalização, como: KEGG (Kyoto Encyclopedia of Genes and Genomes), Reactome, Pathway Commons, BioCarta.
   - Associe os genes diferencialmente expressos às vias de sinalização em que estão envolvidos.
   - R/Bioconductor: Pacotes como: clusterProfiler: análise de enriquecimento e anotação funcional. pathview: visualização de vias do KEGG.
 - Análise de Correlação com Dados Clínicos:como a expressão gênica se correlaciona com os dados clínicos, como tipo de amostra, estágio da doença ou características demográficas.

Exemplo de pipeline básico:
library(clusterProfiler)
library(org.Hs.eg.db)
library(pathview)

# Análise de enriquecimento KEGG
enrich_kegg <- enrichKEGG(gene = gene_list, organism = "hsa", pvalueCutoff = 0.05)
barplot(enrich_kegg)

# Visualização de vias específicas
pathview(gene.data = gene_list, pathway.id = "hsa05200", species = "hsa")
